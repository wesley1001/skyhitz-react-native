'use strict';

let React = require('react-native');
let {
  PropTypes,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} = React;

let autobind = require('autobind-decorator');

let Layout = require('./Layout');

class Tab extends React.Component {
  static propTypes = {
    title: PropTypes.string,
    skyhitzTab: PropTypes.boolean,
    titleStyle: Text.propTypes.style,
    badge: PropTypes.element,
    onPress: PropTypes.func,
    selected:PropTypes.boolean
  };

  render() {
    let { title, badge, skyhitzTab, selected } = this.props;
    let icon = React.Children.only(this.props.children);

    if (title) {
      title =
        <Text
          numberOfLines={1}
          style={[styles.title, this.props.titleStyle]}>
          {title}
        </Text>;
    }

    if (badge) {
      badge = React.cloneElement(badge, {
        style: [styles.badge, badge.style],
      });
    }

    let tabStyle = [styles.container, title || skyhitzTab ? null : styles.untitledContainer, selected && !skyhitzTab ? styles.selected :null];
    return (
      <TouchableOpacity
        activeOpacity={0.8}
        onPress={this._handlePress}
        style={tabStyle}>
        <View>
          {icon}
          {badge}
        </View>
        {title}
      </TouchableOpacity>
    );
  }

  @autobind
  _handlePress(event) {
    if (this.props.onPress) {
      this.props.onPress(event);
    }
  }
}

let styles = StyleSheet.create({
  badge: {
    position: 'absolute',
    top: -6,
    right: -10,
  },
  selected:{
    backgroundColor:'#131313'
  },
  notselected:{
    backgroundColor: 'rgba(41, 43, 51, 1)'
  },
  container: {
    flex: 1,
    flexDirection: 'column',
    justifyContent: 'flex-end',
    alignItems: 'center',
    backgroundColor: 'rgba(41, 43, 51, 0.99)'
  },
  untitledContainer: {
    paddingBottom: 13,
  },
  title: {
    color: '#929292',
    fontSize:12,
    textAlign: 'center',
    alignSelf: 'stretch',
    marginTop: 4,
    marginBottom: 1 + Layout.pixel,
  },
});

module.exports = Tab;
