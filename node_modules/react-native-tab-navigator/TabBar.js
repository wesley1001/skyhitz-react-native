'use strict';

let React = require('react-native');
let Entry = require('../../app/components/entryviews/entry');
let Player = require('../../app/components/player/player');
var Dimensions = require('Dimensions');
var Subscribable = require('Subscribable');
var ThreeDots = require('../../app/components/helpers/threedots');
var EntryTitle = require('../../app/utils/entrytitle');
var BlurView = require('react-native-blur').BlurView;

let {
  StyleSheet,
  Animated,
  PanResponder,
  TouchableOpacity,
  Text,
  Image,
  View,
} = React;

let Layout = require('./Layout');

let styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    height: 49,
    position: 'absolute',
    left: 0,
    right: 0,    
  },
  songTitle: {
    paddingTop:25
  },
  bg: {
      width:Dimensions.get('window').width,
      height:39
  },  
  shadow: {
    backgroundColor: 'rgba(0, 0, 0, 0)',
    height: Layout.pixel,
    position: 'absolute',
    left: 0,
    right: 0,
    top: -Layout.pixel,
  },
  modalPlayer:{
    width:Dimensions.get('window').width,
    height:Dimensions.get('window').height + 40,
    backgroundColor:'transparent',
    position:'absolute',
    top:-89
  },
  tabPlayer:{
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems:'center',
    left: 0,
    right:0,
    borderBottomColor:'#1dadff',
    borderTopColor:'#1e1f23',
    borderBottomWidth:0.5,
    borderTopWidth:0.5,
    backgroundColor:'rgba(41, 43, 51, 0.60)'
  },
  blur:{
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems:'center',
    backgroundColor:'rgba(41, 43, 51, 0.60)'
  },
  tabPlayerLeftSection:{
    justifyContent:'flex-start',
    flexDirection: 'row',
    alignItems:'center'
  },
  entryTitle:{
    fontFamily:'Avenir',
    fontSize:12,
    color:'white'
  },
  modalPlayerIn:{
    flex:1,
    backgroundColor:'blue'
  },
  playBtn:{
    width:15,
    height:15,
    marginLeft:10,
    marginRight:10,
    top:-13
  }
});

var TabBar = React.createClass({
  mixins: [Subscribable.Mixin],
  getInitialState(){
    return{
      opacity: new Animated.Value(0),
      pan: new Animated.ValueXY(),
      tabBarPosition: new Animated.Value(-89),
      playerState:'',
      entryTitle:''
    }
  },
  getTabBarStyles(){
    return [
      styles.container
    ]
  },
  getOverlayStyle() {
    return [
      styles.modalPlayer,
      {
        transform: [
          {
            translateX: this.state.pan.x
          },
          {
            translateY: this.state.pan.y
          }
        ]
      }
    ];
  },
  getPlayerModalStyle(){
    return [
      styles.modalPlayerIn,
      {
        opacity: this.state.pan.y.interpolate({inputRange: [-(Dimensions.get('window').height - 49),0], outputRange: [1,0]})
      }
    ];
  },
  getTabPlayerStyle(){
    return [
      styles.tabPlayer,
      {
        opacity: 1,
        bottom: this.state.tabBarPosition
      }
    ];
  },
  getTabBarStyle(){
    return [
      styles.container,
      {
        bottom: this.state.pan.y.interpolate({inputRange: [-(Dimensions.get('window').height - 50),0], outputRange: [-68,0]})
      }
    ];
  },
  showModalPlayer(){
    Animated.timing(this.state.pan.y, {
      duration: 300,
      toValue: -(Dimensions.get('window').height - 49)
    }).start();
  },
  hideModalPlayer(){
    Animated.timing(this.state.pan.y, {
      duration: 300,
      toValue: 0
    }).start();
  },
  showTabPlayer(){
    Animated.timing(this.state.tabBarPosition, {
      duration: 300,
      toValue: 0
    }).start();
  },
  componentWillMount() {
  this._panResponder = PanResponder.create({
    onMoveShouldSetResponderCapture: () => true, //Tell iOS that we are allowing the movement
    onMoveShouldSetPanResponderCapture: () => true, // Same here, tell iOS that we allow dragging
    onPanResponderGrant: (e, gestureState) => {
      this.state.pan.setOffset({x: this.state.pan.x.getAnimatedValue(), y: this.state.pan.y.getAnimatedValue()});
      this.state.pan.setValue({x: 0, y: 0}); //Initial value
    },
    onPanResponderMove: Animated.event([
      null, {dy: this.state.pan.y}
    ]), // Creates a function to handle the movement and set offsets
    onPanResponderRelease: (e, gestureState) => {
      this.state.pan.flattenOffset();
      if (gestureState.dy >= 100) {
        this.hideModalPlayer();
      } else {
        this.showModalPlayer();
      }
    }
  });
  },
  handleStateChange(state){
    console.log(state);
    this.setState({playerState: state.state})
  },
  setEntryTitle(args){
    this.setState({entryTitle:args.videoTitle})
  },
  componentDidMount() {
    this.addListenerOn(Player.eventEmitter, 'loadVideoInfo', this.setEntryTitle);
    this.addListenerOn(Player.eventEmitter, 'showPlayer', this.showModalPlayer);
    this.addListenerOn(Player.eventEmitter, 'hidePlayer', this.hideModalPlayer);
    this.addListenerOn(Player.eventEmitter, 'showTabPlayer', this.showTabPlayer);
    this.addListenerOn(Player.eventEmitter, 'changeState', this.handleStateChange);
  },
  playerBtn(){
    if(this.state.playerState == 'playing'){
      return(
          <TouchableOpacity style={styles.songTitle} onPress={Player.pauseCurrentVideo}>
          <Image style={styles.playBtn} source={require('image!pausebtnwhite')}/>
          </TouchableOpacity>
            )
    }else{
      return(
          <TouchableOpacity style={styles.songTitle} onPress={Player.playCurrentVideo}>
          <Image style={styles.playBtn} source={require('image!playbtnwhite')}/>
          </TouchableOpacity>
      )
    }
  },
  entryTitle(){
    return(<Text style={styles.entryTitle}>{EntryTitle.getTrimmedTitle(this.state.entryTitle)}</Text>)
  },
  render() {
    return (
      <View style={styles.tabNav}>
        <Animated.View style={this.getOverlayStyle()} >
          <Animated.View style={this.getTabPlayerStyle()} {...this._panResponder.panHandlers}>
              <View style={styles.bg} >
                <View style={styles.blur}>
                  <View style={styles.tabPlayerLeftSection}>
                    {this.playerBtn()}
                    <TouchableOpacity onPress={this.showModalPlayer}>
                    {this.entryTitle()}
                    </TouchableOpacity>
                  </View>
                  <ThreeDots onPress={()=>{}}/>
                </View>
              </View>
          </Animated.View>
          <Animated.View style={this.getPlayerModalStyle()}>
            <Entry/>
          </Animated.View>
        </Animated.View>
          <Animated.View {...this.props} style={this.getTabBarStyle()}>
          {this.props.children}
          <View style={styles.shadow} />
        </Animated.View>
      </View>
    );
  }
});

module.exports = TabBar;
